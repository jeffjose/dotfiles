#!/bin/bash
#
#
set -e # Exit on error

# Constants
DOTFILES_DIR="$HOME/dotfiles"
BACKUP_SUFFIX=".bak.$(date +%Y%m%d_%H%M%S)"

# Directories to create
DIRECTORIES=(
  "$HOME/bin"
  "$HOME/scripts"
  "$HOME/Downloads"
  "$HOME/.screen"
  "$HOME/.config/nvim"
  "$HOME/.local/share/nvim/backup"
  "$HOME/.config/espanso"
  "$HOME/.config/containers"
  "$HOME/.config/Code/User"
  "$HOME/.ipython/profile_default"
  "$HOME/.screenlayout"
  "$HOME/.jupyter/custom"
  "$HOME/.config/mise"
  "$HOME/.pnpm"
)

# Files to symlink (source:target)
declare -A SYMLINKS=(
  ["$DOTFILES_DIR/.aliases"]="$HOME/.aliases"
  ["$DOTFILES_DIR/.aliases.bash"]="$HOME/.aliases.bash"
  ["$DOTFILES_DIR/.colordiffrc"]="$HOME/.colordiffrc"
  ["$DOTFILES_DIR/.cshrc"]="$HOME/.cshrc"
  ["$DOTFILES_DIR/.cwdcmd"]="$HOME/.cwdcmd"
  ["$DOTFILES_DIR/.gitconfig"]="$HOME/.gitconfig"
  ["$DOTFILES_DIR/.pdbrc"]="$HOME/.pdbrc"
  ["$DOTFILES_DIR/.precmd"]="$HOME/.precmd"
  ["$DOTFILES_DIR/.prompt"]="$HOME/.prompt"
  ["$DOTFILES_DIR/.screen/default"]="$HOME/.screen/default"
  ["$DOTFILES_DIR/.screenrc"]="$HOME/.screenrc"
  ["$DOTFILES_DIR/.tabletaliases"]="$HOME/.tabletaliases"
  ["$DOTFILES_DIR/nvim/init.vim"]="$HOME/.vimrc"
  ["$DOTFILES_DIR/nvim/init.vim"]="$HOME/.config/nvim/init.vim"
  ["$DOTFILES_DIR/nvim/plugins.vim"]="$HOME/.config/nvim/plugins.vim"
  ["$DOTFILES_DIR/.XResources"]="$HOME/.XResources"
  ["$DOTFILES_DIR/.xmodmap"]="$HOME/.xmodmap"
  ["$DOTFILES_DIR/.xsession"]="$HOME/.xsession"
  ["$DOTFILES_DIR/keybindings.json"]="$HOME/.config/Code/User/keybindings.json"
  ["$DOTFILES_DIR/ipython_config.py"]="$HOME/.ipython/profile_default/ipython_config.py"
  ["$DOTFILES_DIR/custom.js"]="$HOME/.jupyter/custom/custom.js"
  ["$DOTFILES_DIR/default.yml"]="$HOME/.config/espanso/default.yml"
  ["$DOTFILES_DIR/containers.conf"]="$HOME/.config/containers/containers.conf"
  ["$DOTFILES_DIR/.jq"]="$HOME/.jq"
  ["$DOTFILES_DIR/config.toml"]="$HOME/.config/mise/config.toml"
  ["$DOTFILES_DIR/audtag.yaml"]="$HOME/audtag.yaml"
)

# Track failures
declare -a failed_tasks=()

# Function to run a task and track its success/failure
run_task() {
  local task_name="$1"
  shift
  if "$@" 2>/dev/null; then
    echo "✓ $task_name"
    return 0
  else
    echo "✗ $task_name"
    failed_tasks+=("$task_name")
    return 1
  fi
}

echo "🚀 Setting up dotfiles in $HOME"
echo "-----------------------------------"

# Create directories
echo -e "\n📁 Directories"
for dir in "${DIRECTORIES[@]}"; do
  run_task "  $dir" mkdir -p "$dir"
done

# Create empty files
echo -e "\n📄 Files"
run_task "  /tmp/cwdcmd_recent_dirs" touch /tmp/cwdcmd_recent_dirs
run_task "  $HOME/.aliases.sensitive.sh" touch "$HOME/.aliases.sensitive.sh"

# Setup screen symlink
echo -e "\n🔗 Screen"
run_task "  $HOME/bin/scrn → /usr/bin/screen" ln -sf /usr/bin/screen "$HOME/bin/scrn"

# Create symlinks
echo -e "\n🔗 Symlinks"
for src in "${!SYMLINKS[@]}"; do
  target="${SYMLINKS[$src]}"
  if [ -e "$target" ] && [ ! -L "$target" ]; then
    run_task "  $target (backup)" mv "$target" "$target$BACKUP_SUFFIX"
  fi
  run_task "  $target → $(basename "$src")" ln -sf "$src" "$target"
done

if [ ${#failed_tasks[@]} -gt 0 ]; then
  echo -e "\n❌ Failed tasks:"
  printf '%s\n' "${failed_tasks[@]}"
  exit 1
else
  echo -e "\n✨ Done!"
fi
